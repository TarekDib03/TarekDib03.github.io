apply(p75.boot, 2, sd)
apply(p75.boot$t, 2, sd)
data(cars93, package=MASS)
data(cars93, package="MASS")
data(Cars93, package="MASS")
attach(Cars93)
names(Cars93)
dim(Cars93)
DriveTrain
train1 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
dim(train1)
length(train1)
train1
tree1 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx1,])
tree2 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx2,])
tree3 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx3,])
library(tree)
tree1 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx1,])
tree2 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx2,])
tree3 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx3,])
idx1 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
idx2 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
idx3 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
tree1 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx1,])
tree2 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx2,])
tree3 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx3,])
idx1
idx2
newdata <- data.frame(Type = "Large",Price = 20)
pred1 <- predict(tree1, newdata, type="class")
pred2 <- predict(tree2, newdata, type="class")
pred3 <- predict(tree3, newdata, type="class")
pred1
pred2
pred3
s <- subset(cars93, Price=20 & Type="Large")
Type
s <- subset(cars93, Price=20 & Type=Large)
cars93[Type="Large",]
Cars93[Type="Large",]
Cars93[Type=="Large",]
s <- Cars[Type=="Large" & Price==20,]
s <- Cars93[Type=="Large" & Price==20,]
dim(s)
length(s)
s
s <- Cars93[Type=="Large" or Price==20,]
s <- Cars93[Type=="Large" | Price==20,]
length(s)
dim(s)
s
s$DriveTrain
idx1 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
idx2 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
idx3 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
tree1 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx1,])
tree2 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx2,])
tree3 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx3,])
newdata <- data.frame(Type = "Large",Price = 20)
pred1 <- predict(tree1, newdata, type="class")
pred2 <- predict(tree2, newdata, type="class")
pred3 <- predict(tree3, newdata, type="class")
pred1
pred2
pred3
s$DriveTrain == "Front"
length(s$DriveTrain == "Front")
s1 = s[s$DriveTrain == "Front",]
s1
length(s1)
nrow(s1)
8/12
s <- Cars93[Type=="Large" | Price==20,]
s.front = s[s$DriveTrain=="Front",]
nrow(s.front)/nrow(s)
library(ElemStatLearn)
library(randomForest)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.rf <- randomForest(y ~ ., data=vowel.train)
vowel.svm <- svm(y ~ ., data=vowel.train)
pred.rf <- predict(vowel.rf, vowel.test[,-1])
pred.svm <- predict(vowel.svm, vowel.test[,-1])
# 5) What are the error rates for the two approaches on the test data set?
err.rf <- sum(pred.rf != vowel.test$y)/length(pred.rf)
err.svm <- sum(pred.svm != vowel.test$y)/length(pred.svm)
table(vowel.test$y, pred.rf)
table(vowel.test$y, pred.svm)
# 6) What is the error rate when the two methods agree on a prediction?
agree.idx <- which(pred.rf == pred.svm)
err.both <- sum(pred.rf[agree.idx] != vowel.test$y[agree.idx])/length(agree.idx)
err.both
err.svm
agree.idx
err.rf
err.svm
?subset
vowel.train$y
vowel.test
head(vowel.test[,-1])
?svm
err.rf <- sum(pred.rf != vowel.test$y)/length(pred.rf)
err.rf
err.svm <- sum(pred.svm != vowel.test$y)/length(pred.svm)
err.svm
table(vowel.test$y, pred.rf)
table(vowel.test$y, pred.svm)
library(zoo)
library(tseries)
goog <- get.hist.quote(instrument="GOOG", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
goog
goog <- get.hist.quote(instrument="si", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
goog <- get.hist.quote(instrument="goog", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
SI <- get.hist.quote(instrument="SI", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
IBM <- get.hist.quote(instrument="IBM", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
stocks <- data.frame(goog, SI, IBM)
head(stocks)
105*0.05
(100-99.75)/100
10^-0.1
10^0.1
10^-0.1-1
10^0.1-1
0.5*(-0.2056718)+0.5*0.2589254
log10(1+0.5*(-0.2056718)+0.5*0.2589254)
log(1+0.5*(-0.2056718)+0.5*0.2589254)
log10(1+0.5*(-0.2056718)+0.5*0.2589254)
exp(-1)
exp(-1)-1
exp(1)-1
exp(0.1)-1
0.5*(-0.6321206)+0.5*0.1051709
log(1+0.5*(-0.6321206)+0.5*0.1051709)
log(1-0.2634749)
exp(-0.1)
exp(-0.1)-1
exp(0.1)
exp(0.1)-1
(exp(-0.1)-1)*0.5 + (exp(0.1)-1)*0.5
100/(exp(0.1))
library(Sweave)
install.packages("Sweave")
install.packages("Sweave")
library(tools)
Sweave("example.Snw")
Sweave("example.Snw")
library(MASS)
?cats
ls(package:lattice)
ls(getNamespace("lattice"), all.names=TRUE)
lset()
ls(lset,package:lattice)
ls("lset",package:lattice)
ls(package:lattice)
help("Sweave", package="utils")
rnwfile <- system.file("Sweave", "example-1.Rnw", package = "utils")
Sweave(rnwfile)
pdflatex("example-1.pdf")
(pdf)latex("example-1.pdf")
getwd()
(pdf)latex("example-1.tex")
pdflatex("example-1.tex")
(pdf)latex("example-1.tex")
(pdf)latex('example-1.tex')
(pdf)latex('example-1')
(pdf)latex(example-1.tex)
(pdf)latex(example-1.pdf)
source("Sweave-test-1.R")
source("http://www.openintro.org/stat/data/present.R")
10/11
0.078/0.138
(0.078/0.138)*100
0.18-0.044
0.191-0.036
0.175+0.018
0.191+0.18+0.028
0.18+0.028
0.191+0.18-0.014
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR(to_checkMD5sums = FALSE)
install.packages()
install.packages()
update.packages(lib.loc = "/usr/local/lib/R/site-library")
install.packages()
install.packages("gplots")
sudo apt-get update
install.packages("ROCR")
install.packages()
version
qt(-0.66646,39)
pt(-0.66646,39)
1-pt(-0.66646,39)
0.09*0.9 + 0.91*0.02
0.02*0.91
0.0992/(0.0992+0.0182)
0.0992/(0.0992+0.1*0.09)
sudo apt-get update
install.packages("foo", dependencies=...)
install.packages("foo", dependencies=T)
install.packages("ROCR", dependencies=T)
install.packages("gplots", dependencies=T)
install.packages("gtools")
install.packages("gdata")
install.packages("gplots", repos = NULL, type="source")
install.packages("ROCR")
library(ROCR)
11/198
1069/1075
update.packages()
install.packages()
install.packages()
install.packages("Rcpp")
install.packages("Rcpp")
library("Rcpp")
install.packages("mice")
library(mice)
library(Rcpp)
library(mice)
qnorm(0.9)
(qnorm(0.9))^2*18^2/16
qt(0.975,499)
qt(0.975,149)
pnorm(-1.2)
pnorm(0.5)
qnorm(0.25)
qnorm(-0.25)
qnorm(0.75)
qnorm(0.995)
0.18-0.15
library(VIM)
vmGUImenu()
library(Rcpp)
library(randomForest)
library(lattice)
library(rpart)
install.packages("mice")
chooseCRANmirror()
install.packages("mice")
library("mice")
2413-460
10*exp(0.06*3)
15*29
30*29/2
2^10
2^30
15*31+1
library(openintro)
data(ncbirths)
births <- data(ncbirths)
summary(births)
data(ncbirths)
ncbirths
summary(ncbirths)
gained_clean <- na.omit(nc$gained)
gained_clean <- na.omit(ncbirths$gained)
n <- length(gained_clean)
n
gained_clean
boot_means <- rep(NA, 100)
for (i in 1:100){
boot_sample <- sample(gained_clean, n, replace = TRUE)
boot_means[i] <- mean(boot_sample)
}
length(boot_mean)
length(boot_means)
hist(boot_means)
inference(ncbirths$gained,type="ci", method="simulation",conflevel=0.9,est="mean",boot_method="perc")
source("http://bit.ly/dasi_inference")
inference(ncbirths$gained,type="ci", method="simulation",conflevel=0.9,est="mean",boot_method="perc")
inference(ncbirths$gained,type="ci", method="simulation",conflevel=0.95,est="median",boot_method="perc")
inference(ncbirths$gained,type="ci", method="simulation",conflevel=0.95,est="median",boot_method="se")
boxplot(ncbirths$weight ~ ncbirths$habit)
boxplot(ncbirths$weight ~ ncbirths$habit, col="rainbow(2)")
boxplot(ncbirths$weight ~ ncbirths$habit, color="rainbow(2)")
boxplot(ncbirths$weight ~ ncbirths$habit, col = c("red", "blue")
)
boxplot(ncbirths$weight ~ ncbirths$habit, col = c("blue", "orange")
)
by(ncbirths$weight, ncbirths$height, mean)
by(ncbirths$weight, ncbirths$habit, mean)
?by
sapply(ncbirths$weight, ncbirths$habit, mean)
ncbirths$habit
ncbirths$weight
sapply(ncbirths$weight, ncbirths$habit, summary)
by(ncbirths$weight, ncbirths$habit, mean)
by(ncbirths$weight, ncbirths$habit, summary)
by(ncbirths$weight, ncbirths$habit, mean())
by(ncbirths$weight, ncbirths$habit)
by(ncbirths$weight, ncbirths$habit, median)
by(ncbirths$weight, ncbirths$habit, mean)
by(ncbirths$weight, ncbirths$habit, summary)
sapply(ncbirths$weight, ncbirths$habit)
?sapply
sapply(ncbirths$weight, mean)
sapply(ncbirths$weight, ncbirths$habit, summary)
?tapply
tapply(ncbirths$weight, ncbirths$habit, summary)
tapply(ncbirths$weight, ncbirths$habit, mean)
tapply(ncbirths$weight, ncbirths$habit, length)
inference(y = ncbirths$weight, x = ncbirths$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker", "nonsmoker"))
inference(y = ncbirths$weight, x = ncbirths$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker", "nonsmoker"))
inference(y = ncbirths$weight, x = ncbirths$habit, est = "media", type = "ci", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker", "nonsmoker"))
inference(y = ncbirths$weight, x = ncbirths$habit, est = "median", type = "ci", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker", "nonsmoker"))
inference(y = ncbirths$weight, x = ncbirths$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker", "nonsmoker"))
inference(y = ncbirths$weight, x = ncbirths$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker", "nonsmoker"))
mean(c(1,2,3))
inference(ncbirths$gained,type="ci", method="simulation",conflevel=0.9,est="mean",boot_method="perc")
inference(y = ncbirths$weight, x = ncbirths$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "simulation", order = c("smoker", "nonsmoker"))
inference(y = ncbirths$weight, x = ncbirths$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "simulation")
tapply(ncbirths$weight, ncbirths$habit, sd)
tapply(ncbirths$weight, ncbirths$habit, mean) + c(-1,1)*tapply(ncbirths$weight, ncbirths$habit, sd)
tapply(ncbirths$weight, ncbirths$habit, summary)
tapply(ncbirths$weight, ncbirths$habit, length)
tapply(ncbirths$weight, ncbirths$habit, mean) + c(-1,1)*tapply(ncbirths$weight, ncbirths$habit, sd)/tapply(ncbirths$weight, ncbirths$habit, length)
smoker <- ncbirths[ncbirths$habit=="smoker",]
Nonsmoker <- ncbirths[ncbirths$habit=="nonsmoker",]
mean(smoker$weight)
mean(smoker$weight, na.rm=T)
mean(Nonsmoker$weight, na.rm=T)
mean(Nonsmoker$weight, na.rm=T) - mean(smoker$weight, na.rm=T)
meanDiff <- mean(Nonsmoker$weight, na.rm=T) - mean(smoker$weight, na.rm=T)
sd(Nonsmoker$weight, na.rm=T)
sd(smoker$weight, na.rm=T)
var(smoker$weight, na.rm=T)
seDiff <- sqrt(var(smoker$weight, na.rm=T)/nrow(smoker) + var(Nonsmoker$weight, na.rm=T)/nrow(Nonsmoker))
seDiff
meanDiff + c(-1,1)*qnorm(0.975)*seDiff
smoker <- ncbirths[ncbirths$habit=="smoker",]
Nonsmoker <- ncbirths[ncbirths$habit=="nonsmoker",]
meanDiff <- mean(Nonsmoker$weight, na.rm=T) - mean(smoker$weight, na.rm=T)
seDiff <- sqrt(var(smoker$weight, na.rm=T)/nrow(smoker) + var(Nonsmoker$weight, na.rm=T)/nrow(Nonsmoker))
meanDiff + c(-1,1)*qnorm(0.975)*seDiff
ncbirths$mage
min(ncbirths$mage)
max(ncbirths$mage)
sorrt(ncbirths$mage)
sort(ncbirths$mage)
hist(ncbirths$mage)
par(mfrow=c(1,1))
boxplot(ncbirths$mage)
summary(ncbirths$mage)
load(url("http://bit.ly/dasi_gss_ws_cl"))
head(gss)
levels(gss$class)
inference(y= gss$wordsum,x = gss$class,est="mean",type="ht",alternative="greater",method="theoretical")
levels(gss$class)
middle=gss[gss$class=="MIDDLE"]
middle=gss[gss$class=="MIDDLE",]
lower=gss[gss$class=="LOWER",]
upper=gss[gss$class=="UPPER",]
working=gss[gss$class=="WORKING",]
aov(gss$class)
anova(gss$class)
names(gss)
aov(gss$class ~ gss$wordsum)
aov(gss$wordsum ~ gss$class)
anova(gss$wordsum ~ gss$class)
aov(gss$wordsum ~ gss$class)
tapply(gss$wordsum, gss$class, mean)
oneway.test(gss$wordsum ~ gss$class)
aov.out <- aov(gss$wordsum ~ gss$class)
summary(aov.out)
TukeyHSD(aov.out)
ncbirts$mature
ncbirths$mature
youngMom <- ncbirths[ncbirths$mature == "younger mom",]
youngMom$mature
max(youngMom$mature)
max(youngMom$mage)
summary(ncbirths$mature)
getwd()
setwd("Analytics/Weeks/Week4/Codes")
setwd("/Analytics/Weeks/Week4/Codes")
setwd("/Analytics/Weeks/Week4-Trees/Codes")
setwd("/Analytics/Weeks/Week4-Trees/Codes")
setwd("Analytics/Weeks/Week4-Trees/Codes")
census <- read.csv("census.csv")
set.seed(2000)
library(caTools)
split <- sample.split(census$over50k, SplitRatio=0.6)
train <- subset(census, split==TRUE)
test <- subset(census, split==FALSE)
logReg1 <- glm(over50k ~., data = train, family = binomial)
summary(logReg1)
pred1 <- predict(logReg1)
pred1 <- predict(logReg1)
table(census$over50, pred1 >= 0.5)
pred1 <- predict(logReg1, newdata=test, type="response")
pred1 <- predict(logReg1, type="response", newdata=test)
table(census$over50, pred1 >= 0.5)
table(test$over50, pred1 >= 0.5)
(t1[1,1]+t1[2,2]) / nrow(test)
t1 <- table(test$over50, pred1 >= 0.5)
(t1[1,1]+t1[2,2]) / nrow(test)
table(test$over50k)
9713/nrow(test)
table(test$over50k)[1]
table(test$over50k)[1] / nrow(test)
library(ROCR)
ROCRpred = prediction(pred1, test$over50k)
as.numeric(performance(ROCRpred, "auc")@y.values)
library(rpart)
library(rpart.plot)
CART1 <- rpart(over50k ~ ., data=train, method="class")
prp(CART1)
pred2 <- predict(CART1, newdata=test)
table(test$over50k, pred2>=0.5)
pred2 <- predict(CART1, newdata=test)
length(pred2)
length(test$over50k)
length(pred2>=0.5)
length(census)
nrow(census)
CART1 <- rpart(over50k ~ ., data=train, method="class")
test <- subset(census, split==FALSE)
nrow(test)
pred2 <- predict(CART1, newdata=test, method="class")
length(pred2)
pred2 <- predict(CART1, newdata=test, type="class")
length(pred2)
table(test$over50k, pred2>=0.5)
table(test$over50k, pred2)
(t2[1,1] + t2[2,2]) / nrow(test)
t2 <- table(test$over50k, pred2)
(t2[1,1] + t2[2,2]) / nrow(test)
ROCRpred2 = prediction(pred2, test$over50k)
pred2 <- predict(CART1, newdata=test, type="class")
library(ROCR)
ROCRpred2 = prediction(pred2, test$over50k)
as.numeric(performance(ROCRpred2, "auc")@y.values)
PredictROC = predict(CART1, newdata = Test)
pred = prediction(PredictROC[,2], Test$over50k)
perf = performance(pred, "tpr", "fpr")  #tpr: true positive rate.
# Compute the AUC
as.numeric(performance(pred, "auc")@y.values)
PredictROC = predict(CART1, newdata = Test)
PredictROC = predict(CART1, newdata = test)
pred = prediction(PredictROC[,2], test$over50k)
perf = performance(pred, "tpr", "fpr")  #tpr: true positive rate.
# Compute the AUC
as.numeric(performance(pred, "auc")@y.values)
library(randomForest)
set.seed(1)
trainSmall = train[sample(nrow(train), 2000), ]
summary(logReg1)
RFTree1 <- randomForest(over50k ~. - nativecountry)
RFTree1 <- randomForest(over50k ~. - nativecountry, data=trainSmall)
pred3 <- predict(RFTree1, newdata=test)
t3 <- table(test$over50k, pred3)
(t3[1,1] + t3[2,2]) / nrow(test)
vu = varUsed(RFTree1, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(MODEL$forest$xlevels[vusorted$ix]))
dotchart(vusorted$x, names(RFTree1$forest$xlevels[vusorted$ix]))
varImpPlot(RFTree1)
library(caret)
library(e1071)
set.seed(2)
fitControl = trainControl( method = "cv", number = 10 )
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
tr <- train(over50k ~ ., data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
tr
CART4 = rpart(over50k ~ ., data=train, cp=0.02)
pred6 <- predict(CART4)
t4 <- table(test$over50k, pred6)
pred6 <- predict(CART4, newdata = test)
t4 <- table(test$over50k, pred6)
pred6 <- predict(CART4, newdata = test, type="class")
t4 <- table(test$over50k, pred6)
(t4[1,1] + t4[2,2])/nrow(test)
CART4 = rpart(over50k ~ ., data=train, cp=0.02)
pred6 <- predict(CART4, newdata = test, type="class")
t4 <- table(test$over50k, pred6)
(t4[1,1] + t4[2,2])/nrow(test)
t4
(9243+1596)/nrow(test)
nrow(test)
prp(CART4)
tr
CART4 = rpart(over50k ~ ., data=train, cp=0.002)
prp(CART4)
pred6 <- predict(CART4, newdata = test, type="class")
t4 <- table(test$over50k, pred6)
(t4[1,1] + t4[2,2])/nrow(test)
rats <- data.frame(id = paste0("rat",1:10),
sex = factor(rep(c("female","male"),each=5)),
weight = c(2,4,1,11,18,12,7,12,19,20),
length = c(100,105,115,130,95,150,165,180,190,175))
?paste0
rats
summary(rats)
summary(rats$weight)
ratsTable <- data.frame(id = paste0("rat",c(6,9,7,3,5,1,10,4,8,2)),
secretID = 1:10)
ratsTable
?match
match(rats$weight)[ratsTable$id]
rats$weight[match(ratsTable$id, rats$id)]
rats$id[match(rats$weight, ratsTable$id)]
match(rats$weight, rats$secretID[rats$id])
split(rats$weight, rats$sex)
