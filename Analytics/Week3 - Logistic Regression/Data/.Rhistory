s$DriveTrain
idx1 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
idx2 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
idx3 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
tree1 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx1,])
tree2 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx2,])
tree3 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx3,])
newdata <- data.frame(Type = "Large",Price = 20)
pred1 <- predict(tree1, newdata, type="class")
pred2 <- predict(tree2, newdata, type="class")
pred3 <- predict(tree3, newdata, type="class")
pred1
pred2
pred3
s$DriveTrain == "Front"
length(s$DriveTrain == "Front")
s1 = s[s$DriveTrain == "Front",]
s1
length(s1)
nrow(s1)
8/12
s <- Cars93[Type=="Large" | Price==20,]
s.front = s[s$DriveTrain=="Front",]
nrow(s.front)/nrow(s)
library(ElemStatLearn)
library(randomForest)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.rf <- randomForest(y ~ ., data=vowel.train)
vowel.svm <- svm(y ~ ., data=vowel.train)
pred.rf <- predict(vowel.rf, vowel.test[,-1])
pred.svm <- predict(vowel.svm, vowel.test[,-1])
# 5) What are the error rates for the two approaches on the test data set?
err.rf <- sum(pred.rf != vowel.test$y)/length(pred.rf)
err.svm <- sum(pred.svm != vowel.test$y)/length(pred.svm)
table(vowel.test$y, pred.rf)
table(vowel.test$y, pred.svm)
# 6) What is the error rate when the two methods agree on a prediction?
agree.idx <- which(pred.rf == pred.svm)
err.both <- sum(pred.rf[agree.idx] != vowel.test$y[agree.idx])/length(agree.idx)
err.both
err.svm
agree.idx
err.rf
err.svm
?subset
vowel.train$y
vowel.test
head(vowel.test[,-1])
?svm
err.rf <- sum(pred.rf != vowel.test$y)/length(pred.rf)
err.rf
err.svm <- sum(pred.svm != vowel.test$y)/length(pred.svm)
err.svm
table(vowel.test$y, pred.rf)
table(vowel.test$y, pred.svm)
library(zoo)
library(tseries)
goog <- get.hist.quote(instrument="GOOG", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
goog
goog <- get.hist.quote(instrument="si", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
goog <- get.hist.quote(instrument="goog", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
SI <- get.hist.quote(instrument="SI", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
IBM <- get.hist.quote(instrument="IBM", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
stocks <- data.frame(goog, SI, IBM)
head(stocks)
105*0.05
(100-99.75)/100
10^-0.1
10^0.1
10^-0.1-1
10^0.1-1
0.5*(-0.2056718)+0.5*0.2589254
log10(1+0.5*(-0.2056718)+0.5*0.2589254)
log(1+0.5*(-0.2056718)+0.5*0.2589254)
log10(1+0.5*(-0.2056718)+0.5*0.2589254)
exp(-1)
exp(-1)-1
exp(1)-1
exp(0.1)-1
0.5*(-0.6321206)+0.5*0.1051709
log(1+0.5*(-0.6321206)+0.5*0.1051709)
log(1-0.2634749)
exp(-0.1)
exp(-0.1)-1
exp(0.1)
exp(0.1)-1
(exp(-0.1)-1)*0.5 + (exp(0.1)-1)*0.5
100/(exp(0.1))
library(Sweave)
install.packages("Sweave")
install.packages("Sweave")
library(tools)
Sweave("example.Snw")
Sweave("example.Snw")
library(MASS)
?cats
ls(package:lattice)
ls(getNamespace("lattice"), all.names=TRUE)
lset()
ls(lset,package:lattice)
ls("lset",package:lattice)
ls(package:lattice)
help("Sweave", package="utils")
rnwfile <- system.file("Sweave", "example-1.Rnw", package = "utils")
Sweave(rnwfile)
pdflatex("example-1.pdf")
(pdf)latex("example-1.pdf")
getwd()
(pdf)latex("example-1.tex")
pdflatex("example-1.tex")
(pdf)latex("example-1.tex")
(pdf)latex('example-1.tex')
(pdf)latex('example-1')
(pdf)latex(example-1.tex)
(pdf)latex(example-1.pdf)
source("Sweave-test-1.R")
source("http://www.openintro.org/stat/data/present.R")
10/11
0.078/0.138
(0.078/0.138)*100
0.18-0.044
0.191-0.036
0.175+0.018
0.191+0.18+0.028
0.18+0.028
0.191+0.18-0.014
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR(to_checkMD5sums = FALSE)
install.packages()
install.packages()
update.packages(lib.loc = "/usr/local/lib/R/site-library")
install.packages()
install.packages("gplots")
sudo apt-get update
install.packages("ROCR")
install.packages()
version
qt(-0.66646,39)
pt(-0.66646,39)
1-pt(-0.66646,39)
0.09*0.9 + 0.91*0.02
0.02*0.91
0.0992/(0.0992+0.0182)
0.0992/(0.0992+0.1*0.09)
sudo apt-get update
install.packages("foo", dependencies=...)
install.packages("foo", dependencies=T)
install.packages("ROCR", dependencies=T)
install.packages("gplots", dependencies=T)
install.packages("gtools")
install.packages("gdata")
install.packages("gplots", repos = NULL, type="source")
install.packages("ROCR")
library(ROCR)
11/198
1069/1075
update.packages()
install.packages()
install.packages()
install.packages("Rcpp")
install.packages("Rcpp")
library("Rcpp")
install.packages("mice")
library(mice)
library(Rcpp)
library(mice)
setwd("Analytics/Weeks/Week3/Data")
parole <- read.csv("parole.csv")
str(parole)
as.factor(parole$state)
str(as.factor(parole$state))
table(parole$state)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
summary(parole$crime)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
violatorLog <- glm(violator ~ ., data=parole, family="binomial")
violatorLog <- glm(violator ~ ., data=train, family="binomial")
summary(violatorLog)
exp(1.61)
summary(violatorLog)$coeff
summary(violatorLog)$coeff[,1]
summary(violatorLog)$coeff[c("race", "state4", "multiple.offenses")]
summary(violatorLog)$coeff[1,2]
summary(violatorLog)$coeff[1,1]
summary(violatorLog)$coeff[c("race")]
(summary(violatorLog)$coeff)[c("race")]
(summary(violatorLog)$coeff[1])[c("race")]
(summary(violatorLog)$coeff[1])
(summary(violatorLog)$coeff)
(summary(violatorLog)$coeff[,1])
(summary(violatorLog)$coeff[,1])[c("race")]
names(mod)
mod <- glm(violator ~ ., data=train, family="binomial")
names(mod)
names(summary(violatorLog))
summary(violatorLog)
summary(violatorLog)$coeff
summary(violatorLog)$coeff[,4]
which(summary(violatorLog)$coeff[,4] < 0.05)
which(summary(mod)$coeff[,4] < 0.05)
which(summary(mod)$coeff[,4] < 0.05)[1]
which(summary(mod)$coeff[,4] < 0.05)[,1]
which(summary(mod)$coeff[,4] < 0.05)
summary(mod)[which(summary(mod)$coeff[,4] < 0.05)]
summary(mod)$coeff[,1][which(summary(mod)$coeff[,4] < 0.05)]
which(summary(mod)$coeff[,4] < 0.05)
id <- which(summary(mod)$coeff[,4] < 0.05)
summary(mod)$coeff[,1][id]
coeff.sig <- summary(mod)$coeff[,1][id]
coeff.sig(1)
coeff.sig[1]
coeff.sig[c("(Intercept)")]
odds <- exp(coeff.sig[c("(Intercept)")] + coeff.sig[c("race")])
odds
odds[1]
as.numeric(odds[1])
as.numeric(odds)
odds <- as.numeric(exp(coeff.sig[c("(Intercept)")] + coeff.sig[c("race")]))
odds
p = odds/(1+odds)
p
exp(-4.2411574 + 0.8867192)
predict(mod, newdata=c(1, 1, 50, 1, 3, 12, 0, 2))
predict(mod, newdata=c(1, 1, 50, 1, 3, 12, 0, 2), type="response")
?predict
c(1, 1, 50, 1, 3, 12, 0, 2)
as.data.frame(c(1, 1, 50, 1, 3, 12, 0, 2))
predict(mod, newdata=as.data.frame(c(1, 1, 50, 1, 3, 12, 0, 2)))
mod
predict(mod, newdata=as.data.frame(c(1, 1, 50, 1, 3, 12, 0, 2)))
predict(mod, newdata=as.data.frame(c(0, 1, 50, 1, 3, 12, 0, 2)))
predict(mod, newdata=c(1, 1, 50, 1, 3, 12, 0, 2))
male=1; race=1; age=50; state=1; time.served=3; max.sentence=12; multiple.offenses=0; crime=2
data.frame(male, race, age, state, time.served, max.sentence, multiple.offenses, crime)
df=data.frame(male, race, age, state, time.served, max.sentence, multiple.offenses, crime)
predict(mod, newdata=df)
male=1; race=1; age=50; state=as.factor(1); time.served=3; max.sentence=12; multiple.offenses=0; crime=as.factor(2)
predict(mod, newdata=df)
male=1; race=1; age=50; state="1"; time.served=3; max.sentence=12; multiple.offenses=0; crime="2"
predict(mod, newdata=df)
head(parole)
str(parole$crime)
factor(1)
as.factor(1)
male=1; race=1; age=50; state="1"; time.served=3; max.sentence=12; multiple.offenses=0; crime=factor(2,0,0,0)
male=1; race=1; age=50; state=factor(0,0,0,1); time.served=3; max.sentence=12; multiple.offenses=0; crime=factor(2,0,0,0)
predict(mod, newdata=df)
coeff(mod)
coefficients(mod)
exp(coefficients(mod))
coefficients(mod)
exp([c("(Intercept)")])
exp(c("(Intercept)"))
exp(coefficients(mod)[c("(Intercept)")])
as.numeric(exp(coefficients(mod)[c("(Intercept)")]))
as.numeric(exp(coefficients(mod)[c("(Intercept)")]+coefficients(mod)[c("male")]))
as.numeric(exp(coefficients(mod)[c("(Intercept)")]+coefficients(mod)[c("male")]+coefficients(mod)[c("race")]+coefficients(mod)[c("state")] + coefficients(mod)[c("time.served")]*3 + coefficients(mod)[c("max.sentence")]*12 + coefficients(mod)[c("multiple.offenses")]*0 + coefficients(mod)[c("crime")]*2)
)
coefficient(mod)["crime"]
coefficient(mod)[c("crime")]
coefficients(mod)[c("crime")]
summary(mod)$coeff
summary(mod)$coeff[,1]
(summary(mod)$coeff[,1])[c("crime")]
as.numeric(exp(coefficients(mod)[c("(Intercept)")]+coefficients(mod)[c("male")]+coefficients(mod)[c("race")]+coefficients(mod)[c("state")] + coefficients(mod)[c("time.served")]*3 + coefficients(mod)[c("max.sentence")]*12 + coefficients(mod)[c("multiple.offenses")]*0 + coefficients(mod)[c("crime2")]))
coefficients(mod)[c("crime2")]
as.numeric(exp(coefficients(mod)[c("(Intercept)")]+coefficients(mod)[c("male")]+coefficients(mod)[c("race")] + coefficients(mod)[c("time.served")]*3 + coefficients(mod)[c("max.sentence")]*12 + coefficients(mod)[c("multiple.offenses")]*0 + coefficients(mod)[c("crime2")]))
0.1841787 / (1+0.1841787)
odds <- as.numeric(exp(coefficients(mod)[c("(Intercept)")]+coefficients(mod)[c("male")]+coefficients(mod)[c("race")] + coefficients(mod)[c("time.served")]*3 + coefficients(mod)[c("max.sentence")]*12 + coefficients(mod)[c("multiple.offenses")]*0 + coefficients(mod)[c("crime2")]))
odss
odds
p = odds/(1+odds)
p
testPred <- predict(mod, newdata=test, type="response")
max(testPred)
table(test$violator, testpred > 0.5)
table(test$violator, testPred > 0.5)
12/23
167/179
179/202
nrow(test)
subset(test, test$violator==0)
nonviolator <- subset(test, test$violator==0)
table(nonviolator$violator)
179/202
table(test$violator)
table(test$violator, testPred == 0.5)
table(test$violator, testPred > 0.3)
table(test$violator, testPred > 0.4)
table(test$violator, testPred > 0.2)
table(test$violator, testPred > 0.7)
table(test$violator, testPred > 0.6)
table(test$violator, testPred > 0.8)
181/202
table(test$violator, testPred > 0.9)
library(ROCR)
ROCRpred <- prediction(testPred, test$violator)
as.numeric(performance(ROCRpred, "auc")@y.values)
loans <- read.csv("loans.csv")
str(loans)
summary(loans)
table(loans$not.fully.paid)
table(loans$not.fully.paid)/nrow(loans)
table(loans$not.fully.paid)/nrow(loans)[c(0)]
table(loans$not.fully.paid)/nrow(loans)[c("0")]
table(loans$not.fully.paid)/nrow(loans)[1]
table(loans$not.fully.paid)/nrow(loans)[,1]
table(loans$not.fully.paid)/nrow(loans)[1,1]
table(loans$not.fully.paid)/nrow(loans)
as.numeric(table(loans$not.fully.paid)/nrow(loans))
as.numeric(table(loans$not.fully.paid)/nrow(loans))[1]
table(loans$not.fully.paid)
8045/(8045+1533)
1533/(8045+1533)
as.numeric(table(loans$not.fully.paid)/nrow(loans))[2]
summary(loans)
is.na(loans)
which(is.na(loans)==TRUE)
sapply(loans, function(x)all(is.na(x)))
sapply(loans, function(x)sum(is.na(x))>=1)
whic(sapply(loans, function(x)sum(is.na(x))>=1)=="TRUE")
whicH(sapply(loans, function(x)sum(is.na(x))>=1)=="TRUE")
which(sapply(loans, function(x)sum(is.na(x))>=1)=="TRUE")
as.character(which(sapply(loans, function(x)sum(is.na(x))>=1)=="TRUE"))
as.character(which(sapply(loans, function(x)sum(is.na(x))>=1)=="TRUE")[1])
which(sapply(loans, function(x)sum(is.na(x))>=1)=="TRUE")
names(which(sapply(loans, function(x)sum(is.na(x))>=1)=="TRUE"))
missing = subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
nrow(missing)
table(missing$not.fully.paid)
12/62
library(VIM)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
vars.for.imputation
?setdiff
ncol(loans)
imputed = irmi(loans[vars.for.imputation])
summary(imputed)
loans[vars.for.imputation] = imputed
loans
summary(loans)
loans_imputed <- read.csv("loans_imputed")
getwd()
loans_imputed <- read.csv("loans_imputed.csv")
summary(loans_imputed)
summary(loans)
a <- aggr(loans)
a
loans[vars.for.imputation] = imputed
a <- aggr(loans)
a
summary(loans)
names(imputed)
names(loans)
summary(imputed)
imputed <- irmi(loans)
summary(imputed)
imputed = irmi(loans[vars.for.imputation])
loans <- read.csv("loans.csv")
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = irmi(loans[vars.for.imputation])
summary(imputed)
warnings()
split <- sample.split(loans_imputed$not.fully.paid, SplitRatio = 0.7)
train <- subset(loans_imputed, split == TRUE)
test <- subset(loans_imputed, split == FALSE)
mod <- glm(not.fully.paid ~ ., data=train, family=binomial)
summary(mod)$coeff
id <- which(summary(mod)$coeff[,4] < 0.05)
coeff.sig <- summary(mod)$coeff[,1][id]
coeff.sig
names(coeff.sig)
coeff.sig <- summary(mod)$coeff[,1][id]
names(coeff.sig)
mod <- glm(not.fully.paid ~ ., data=train, family=binomial)
summary(mod)
mod <- glm(not.fully.paid ~ ., data=train, family="binomial")
summary(mod)
loans_imputed <- read.csv("loans_imputed.csv")  # Use this instead of the one developed using VIM
split <- sample.split(loans_imputed$not.fully.paid, SplitRatio = 0.7)
train <- subset(loans_imputed, split == TRUE)
test <- subset(loans_imputed, split == FALSE)
names(loans_imputed)
str(loans_imputed)
loans_imputed$purpose = as.factor(loans_imputed$purpose)
set.seed(144)
split <- sample.split(loans_imputed$not.fully.paid, SplitRatio = 0.7)
train <- subset(loans_imputed, split == TRUE)
test <- subset(loans_imputed, split == FALSE)
mod <- glm(not.fully.paid ~ ., data=train, family="binomial")
summary(mod)
id <- which(summary(mod)$coeff[,4] < 0.05)
names(coeff.sig)
loans_imputed$purpose = as.factor(loans_imputed$purpose)
set.seed(144)
split <- sample.split(loans_imputed$not.fully.paid, SplitRatio = 0.7)
train <- subset(loans_imputed, split == TRUE)
test <- subset(loans_imputed, split == FALSE)
# Build the model
mod <- glm(not.fully.paid ~ ., data=train, family="binomial")
# index of Significant predictors
id <- which(summary(mod)$coeff[,4] < 0.05)
# Significant predictors
coeff.sig <- summary(mod)$coeff[,1][id]
names(coeff.sig)
exp(0.09317)
predicted.risk <- predict(mod, newdata=test, type="response")
table(test$not.full.paid, predicted.risk > 0.5)
predicted.risk
length(predicted.risk)
nrow(test)
nrow(train)
table(test$not.full.paid, predicted.risk > 0.5)
table(test$not.fully.paid, predicted.risk > 0.5)
test$predicted.risk <- predicted.risk
names(test)
(Conf[1,1]+Conf[2,2])/sum(Conf)
Conf <- table(test$not.fully.paid, predicted.risk > 0.5)
(Conf[1,1]+Conf[2,2])/sum(Conf)
table(test$not.fully.paid)
sum(table(test$not.fully.paid))
2413/sum(table(test$not.fully.paid))
table(test$not.fully.paid)[1]
as.numeric(table(test$not.fully.paid)[1])
ROCRpred <- prediction(predicted.risk, test$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
bivariate = glm(not.fully.paid~int.rate, data=train, family="binomial")
summary(bivariate)
cor(train$int.rate, train$fico)
bivariateTestPred <- predict(bivariate, newdata=test, type="response")
bivariateTestPred$test <- predict(bivariate, newdata=test, type="response")
names(test)
test$bivariateTestPred <- predict(bivariate, newdata=test, type="response")
names(test)
test$bivariateTestPred[test$not.fully.paid==1]
max(test$bivariateTestPred[test$not.fully.paid==1])
table(test$not.fully.paid, bivariate >= 0.5)
table(test$not.fully.paid, bivariate >= 0.5)
table(test$not.fully.paid, test$bivariateTestPred >= 0.5)
max(test$bivariateTestPred[test$not.fully.paid==0])
bivariate = glm(not.fully.paid~int.rate, data=train, family="binomial")
bivariateTestPred <- predict(bivariate, newdata=test, type="response")
table(test$not.fully.paid, bivariateTestPred >= 0.5)
names(test)
table(test$not.fully.paid, bivariateTestPred <= 0.5)
table(test$not.fully.paid, bivariateTestPred >= 0.5)
test.0 = subset(test, test$not.fully.paid==0)
nrow(test.0)
test.0 = subset(test, test$not.fully.paid==0 & test$bivariateTestPred >= 0.5)
nrow(test.0)
test.0 = subset(test, test$not.fully.paid==0 & test$bivariateTestPred <= 0.5)
nrow(test.0)
bivariate.Pred <- predict(bivariate, newdata=test, type="response")
max(test$bivariateTestPred[test$not.fully.paid==0])
summary(bivariate.Pred)
ROCRbipred <- prediction(bivariate.pred, test$not.fully.paid)
ROCRbipred <- prediction(bivariate.Pred, test$not.fully.paid)
as.numeric(performance(ROCRbipred, "auc")@y.values)
prediction.bivariate <- prediction(bivariate.Pred, test$not.fully.paid)
as.numeric(performance(prediction.bivariate, "auc")@y.values)
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
test$profit
max(test$profit)
max(test$int.rate)
max(test$profit)*10
highInterest <- subset(test, test$int.rate >= 0.15)
names(highInterest)
mean(highInterest$profit)
highInterest$profit
not = highInterest[highInterest$profit==-1,]
nrow(not)
nrow(not)/nrow(highInterest)
table(highInterest$not.fully.paid)
table(highInterest$not.fully.paid)/sum(table(highInterest$not.fully.paid))
as.numeric(table(highInterest$not.fully.paid)/sum(table(highInterest$not.fully.paid)))
as.numeric(table(highInterest$not.fully.paid)/sum(table(highInterest$not.fully.paid)))[1]
as.numeric(table(highInterest$not.fully.paid)/sum(table(highInterest$not.fully.paid)))[2]
names(test)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans <- subset(highInterest, highInterest$predicted.risk <= cutoff)
nrow(selectedLoans)
selectedLoans$profit
sum(selectedLoans$profit)
cutoff
sum(selectedLoans$profit==-1)
table(selectedLoans$not.fully.paid)
sum(selectedLoans$profit==-1)
max(test$bivariateTestPred[test$not.fully.paid==0])
max(test$bivariate.Pred[test$not.fully.paid==0])
bivariate.Pred <- predict(bivariate, newdata=test, type="response")
max(test$bivariate.Pred[test$not.fully.paid==0])
summary(bivariate.Pred)
max(summary(bivariate.Pred))
