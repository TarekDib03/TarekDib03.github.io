ns1 <- ns(xValues, df=1)
lm1 <- lm(yValues ~ ns1)
?rmse
summary(lm1)
?rmse
??rmse
library(medley)
?rmse
rmse(yValues, lm1$fitted)
for (i in 1:10){
ns2[i] <- ns(xValues)
lm2[i] <- lm(yValues ~ ns2[i])
err[i] <- rmse(lm2)
}
ns1 <- ns(xValues, df=1)
length(ns1)
typeof(ns1)
ns1 = numeric(length(xValues))
ns1
for (i in 1:10){
ns2[i] <- ns(xValues)
lm2[i] <- lm(yValues ~ ns2[i])
err[i] <- rmse(lm2)
}
ns2 = numeric(length(xValues))
for (i in 1:10){
ns2[i] <- ns(xValues)
lm2[i] <- lm(yValues ~ ns2[i])
err[i] <- rmse(lm2)
}
for (i in 1:10){
ns2[i] <- ns(xValues, df=i)
lm2[i] <- lm(yValues ~ ns2[i])
err[i] <- rmse(lm2)
}
for (i in 1:10){
ns2[i] <- ns(xValues, df=i)
}
ns2
ns1 <- ns(xValues, df=1)
length(ns1)
i=seq(1,10)
i
ns2 = rep(NA, length(xValues))
ns2
for (i in 1:10){
ns2[i] <- ns(xValues, df=i)
}
for (i in 1:10){
ns2 <- ns(xValues, df=i)
}
length(ns2)
?matrix
ns2 = matrix(NA, nrow=length(xValues), ncol=10, byrow=T)
dim(ns2)
for (i in 1:10){
ns2 <- ns(xValues, df=i)
}
dim(ns2)
ns2
for (i in 1:10){
ns2[i] <- ns(xValues, df=i)
}
for (i in 1:10){
ns2[i] <- ns(xValues, df=i)[i]
}
ns2
ns2[1]
ns2[,1]
i=seq(1,10)
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
}
ns2[,1]
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm1[,i] <- lm(yValue~ns[,i])
}
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm1[,i] <- lm(yValues~ns[,i])
}
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm1[,i] <- lm(yValues~ns2[,i])
}
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm1[,i] <- lm(yValues~ns2[,i])[,i]
}
lm2 = matrix(NA, nrow=length(xValues), ncol=10, byrow=T)
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm2[,i] <- lm(yValues~ns2[,i])
}
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
}
ns2 = rep(NA, length(xValues))
ns2 = rep(NA, length(xValues))
for (i in 1:10){
ns2[i] <- ns(xValues, df=i)[i]
}
ns2[1]
ns2[,1]
ns2
ns1 <- ns(xValues, df=1)
ns1
ns2 = matrix(NA, nrow=length(xValues), ncol=10, byrow=T)
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
}
ns2[,1]
ns1
ns1 == ns2
typeof(ns1)
typeof(ns2)
ns1 == ns2[,1]
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm2 <- lm(yValues ~ ns2[,i])
}
dim(lm2)
length(lm2)
lm2
summarylm2
summary(lm2)
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm2 <- lm(yValues ~ ns2[,i])
err <- rmse(yValues, lm1$fitted)
}
err
i=seq(1,10)
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm2 <- lm(yValues ~ ns2[,i])
err[i] <- rmse(yValues, lm1$fitted)
}
err
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm2 <- lm(yValues ~ ns2[,i])
err[i] <- rmse(yValues, lm2$fitted)
}
err
lm1
lm1 <- lm(yValues ~ ns1)
lm1 <- lm(yValues ~ ns2[,1])
lm1
lm1 <- lm(yValues ~ ns2[,2])
ns1 <- ns(xValues, df=2)
lm3 <- lm(yValues ~ ns1)
lm1
lm3
rmse(yValues, lm3$fitted)
err
rmse(yValues, lm1$fitted)
ns2 = matrix(NA, nrow=length(xValues), ncol=10)
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm2 <- lm(yValues ~ ns2[,i])
err[i] <- rmse(yValues, lm2$fitted)
}
err
ns1 <- ns(xValues, df=1)
lm1 <- lm(yValues ~ ns1)
rmse(yValues, lm1$fitted)
ns1 <- ns(xValues, df=2)
lm1 <- lm(yValues ~ ns1)
rmse(yValues, lm1$fitted)
ns1 <- ns(xValues, df=3)
lm1 <- lm(yValues ~ ns1)
rmse(yValues, lm1$fitted)
ns1 <- ns(xValues, df=4)
lm1 <- lm(yValues ~ ns1)
rmse(yValues, lm1$fitted)
err
ns2 = matrix(NA, nrow=length(xValues), ncol=10, byrow=T)
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm2 <- lm(yValues ~ ns2[,i])
err[i] <- rmse(yValues, lm2$fitted)
}
err
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm2[i] <- lm(yValues ~ ns2[,i])
err[i] <- rmse(yValues, lm2$fitted)
}
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm2[,i] <- lm(yValues ~ ns2[,i])
err[i] <- rmse(yValues, lm2$fitted)
}
?ns
for (i in 1:10){
ns2[,i] <- ns(xValues, df=i)[,i]
lm2 <- lm(yValues ~ ns2[,i])
err[i] <- rmse(yValues, lm2$fitted)
}
ns2[,1]
install.packages("simpleboot")
library(simpleboot)
data(airquality)
attach(airquality)
set.seed(333); x <- rnorm(30)
bootMean <- rep(NA,1000); sampledMean <- rep(NA,1000)
for(i in 1:1000){bootMean[i] <- mean(sample(x,replace=TRUE))}
hist(bootMean)
length(bootMean)
quantile(wind)
names(airquality)
quantile(Wind)
quantile(Wind,0.75)
theta <- quantile(Wind,0.75)
theta
theta[1]
for(i in 1:1000){bootMean[i] <- quantile(sample(Wind,replace=TRUE)),0.75}
for(i in 1:1000){bootMean[i] <- quantile(sample(Wind,replace=TRUE),0.75)}
set.seed(883833)
for(i in 1:1000){boot75Percentile[i] <- quantile(sample(Wind,replace=TRUE),0.75)}
boot75Percentile <- rep(NA,1000)
for(i in 1:1000){boot75Percentile[i] <- quantile(sample(Wind,replace=TRUE),0.75)}
?one.boot
set.seed(883833)
boot75Percentile <- rep(NA,1000)
percentile.75 <- quantile(Wind, 0.75)
for(i in 1:1000){boot75Percentile[i] <- quantile(sample(Wind,replace=TRUE),0.75)}
one.boot(Wind, percentile.75, 1000)
percentile.75 <- quantile(Wind, 0.75)
one.boot(Wind, quantile(Wind, 0.75), 1000)
one.boot(Wind, mean(Wind), 1000)
one.boot(Wind, quantile, 1000)
one.boot(Wind, mean, 1000)
for(i in 1:1000){boot75Percentile[i] <- quantile(sample(Wind,replace=TRUE),0.75)}
library(medley)
rmse(boot75Percentile)
sd(boot75Percentile)
# Define a data set
set.seed(53535)
xValues = seq(0,2*pi,length=100)
yValues = rnorm(100) + sin(xValues)
library(splines)
rmse.lm <- c()
for (i in 1:10){
x.ns <- ns(xValues, df=n)
y.lm <- lm(yValues ~ x.ns)
rmse.lm <- c(rmse.lm, rmse(yValues, y.lm$fitted))
}
plot(rmse.lm)
rmse.lm
library(splines)
set.seed(53535)
xValues = seq(0,2*pi,length=100)
yValues = rnorm(100) + sin(xValues)
rmse.lm <- c()
for(n in 1:10)
{
x.ns <- ns(xValues, df=n)
y.lm <- lm(yValues ~ x.ns)
rmse.lm <- c(rmse.lm, rmse(yValues, y.lm$fitted))
}
plot(rmse.lm)
rmse.lm <- c()
for (i in 1:10){
x.ns <- ns(xValues, df=i)
y.lm <- lm(yValues ~ x.ns)
rmse.lm <- c(rmse.lm, rmse(yValues, y.lm$fitted))
}
plot(rmse.lm)
plot(rmse.lm, pch=19, col="blue")
set.seed(883833)
percentile.75 <- quantile(Wind, 0.75)
percentile.75
q75.boot <- one.boot(Wind, q75, 1000)
q75 <- rep(NA,1000)
for(i in 1:1000){q75[i] <- quantile(sample(Wind,replace=TRUE),0.75)}
q75.boot <- one.boot(Wind, q75, 1000)
?quantile
length(q75)
q75.boot <- one.boot(Wind, quantile(probs=0.75), 1000)
q75.boot <- one.boot(Wind, quantile, 1000)
q75.boot <- one.boot(Wind, mean, 1000)
dim(q75.boot)
length(q75.boot)
q75.boot
q75.boot <- one.boot(Wind, quantile(dat[idx],0.75), 1000)
q75Fun <- function(x, idx){quantile(x[ix], 0.75)}
q75.boot <- one.boot(Wind, FUN = q75Fun, 1000)
q75Fun <- function(x, idx){quantile(x[idx], 0.75)}
q75.boot <- one.boot(Wind, FUN = q75Fun, 1000)
typeof(q75.boot)
one.boot()
one.boot
set.seed(883833)
p75 <- rep(NA,1000)
# Define a function that returns the 75th percentile of a vector
p75Fun <- function(x, idx){quantile(x[idx], 0.75)}
p75.boot <- one.boot(Wind, FUN = p75Fun, 1000)
hist(p75.boot)
sd(p75.boot)
hist(p75.boot$t)
p75.boot$t
type(p75.boot$t)
typeof(p75.boot$t)
class(p75.boot$t)
apply(p75.boot$t, 2, se)
apply(p75.boot$t, 2, sd)
p75.boot$t[,2]
p75.boot$t[]
p75.boot$t[1]
sd(p75.boot$t)
set.seed(883833)
p75 <- rep(NA,1000)
# Define a function that returns the 75th percentile of a vector
p75Fun <- function(x, idx){quantile(x[idx], 0.75)}
p75.boot <- one.boot(Wind, FUN = p75Fun, 1000)
apply(p75.boot, 2, sd)
apply(p75.boot$t, 2, sd)
data(cars93, package=MASS)
data(cars93, package="MASS")
data(Cars93, package="MASS")
attach(Cars93)
names(Cars93)
dim(Cars93)
DriveTrain
train1 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
dim(train1)
length(train1)
train1
tree1 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx1,])
tree2 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx2,])
tree3 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx3,])
library(tree)
tree1 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx1,])
tree2 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx2,])
tree3 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx3,])
idx1 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
idx2 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
idx3 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
tree1 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx1,])
tree2 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx2,])
tree3 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx3,])
idx1
idx2
newdata <- data.frame(Type = "Large",Price = 20)
pred1 <- predict(tree1, newdata, type="class")
pred2 <- predict(tree2, newdata, type="class")
pred3 <- predict(tree3, newdata, type="class")
pred1
pred2
pred3
s <- subset(cars93, Price=20 & Type="Large")
Type
s <- subset(cars93, Price=20 & Type=Large)
cars93[Type="Large",]
Cars93[Type="Large",]
Cars93[Type=="Large",]
s <- Cars[Type=="Large" & Price==20,]
s <- Cars93[Type=="Large" & Price==20,]
dim(s)
length(s)
s
s <- Cars93[Type=="Large" or Price==20,]
s <- Cars93[Type=="Large" | Price==20,]
length(s)
dim(s)
s
s$DriveTrain
idx1 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
idx2 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
idx3 <- sample(1:nrow(Cars93), size=nrow(Cars93), replace=TRUE)
tree1 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx1,])
tree2 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx2,])
tree3 <- tree(DriveTrain ~ Price + Type, data=Cars93[idx3,])
newdata <- data.frame(Type = "Large",Price = 20)
pred1 <- predict(tree1, newdata, type="class")
pred2 <- predict(tree2, newdata, type="class")
pred3 <- predict(tree3, newdata, type="class")
pred1
pred2
pred3
s$DriveTrain == "Front"
length(s$DriveTrain == "Front")
s1 = s[s$DriveTrain == "Front",]
s1
length(s1)
nrow(s1)
8/12
s <- Cars93[Type=="Large" | Price==20,]
s.front = s[s$DriveTrain=="Front",]
nrow(s.front)/nrow(s)
library(ElemStatLearn)
library(randomForest)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.rf <- randomForest(y ~ ., data=vowel.train)
vowel.svm <- svm(y ~ ., data=vowel.train)
pred.rf <- predict(vowel.rf, vowel.test[,-1])
pred.svm <- predict(vowel.svm, vowel.test[,-1])
# 5) What are the error rates for the two approaches on the test data set?
err.rf <- sum(pred.rf != vowel.test$y)/length(pred.rf)
err.svm <- sum(pred.svm != vowel.test$y)/length(pred.svm)
table(vowel.test$y, pred.rf)
table(vowel.test$y, pred.svm)
# 6) What is the error rate when the two methods agree on a prediction?
agree.idx <- which(pred.rf == pred.svm)
err.both <- sum(pred.rf[agree.idx] != vowel.test$y[agree.idx])/length(agree.idx)
err.both
err.svm
agree.idx
err.rf
err.svm
?subset
vowel.train$y
vowel.test
head(vowel.test[,-1])
?svm
err.rf <- sum(pred.rf != vowel.test$y)/length(pred.rf)
err.rf
err.svm <- sum(pred.svm != vowel.test$y)/length(pred.svm)
err.svm
table(vowel.test$y, pred.rf)
table(vowel.test$y, pred.svm)
library(zoo)
library(tseries)
goog <- get.hist.quote(instrument="GOOG", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
goog
goog <- get.hist.quote(instrument="si", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
goog <- get.hist.quote(instrument="goog", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
SI <- get.hist.quote(instrument="SI", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
IBM <- get.hist.quote(instrument="IBM", start="2007-07-01", end="2013-06-30", quote="AdjClose",
provider="yahoo")
stocks <- data.frame(goog, SI, IBM)
head(stocks)
105*0.05
(100-99.75)/100
10^-0.1
10^0.1
10^-0.1-1
10^0.1-1
0.5*(-0.2056718)+0.5*0.2589254
log10(1+0.5*(-0.2056718)+0.5*0.2589254)
log(1+0.5*(-0.2056718)+0.5*0.2589254)
log10(1+0.5*(-0.2056718)+0.5*0.2589254)
exp(-1)
exp(-1)-1
exp(1)-1
exp(0.1)-1
0.5*(-0.6321206)+0.5*0.1051709
log(1+0.5*(-0.6321206)+0.5*0.1051709)
log(1-0.2634749)
exp(-0.1)
exp(-0.1)-1
exp(0.1)
exp(0.1)-1
(exp(-0.1)-1)*0.5 + (exp(0.1)-1)*0.5
100/(exp(0.1))
library(Sweave)
install.packages("Sweave")
install.packages("Sweave")
library(tools)
Sweave("example.Snw")
Sweave("example.Snw")
library(MASS)
?cats
ls(package:lattice)
ls(getNamespace("lattice"), all.names=TRUE)
lset()
ls(lset,package:lattice)
ls("lset",package:lattice)
ls(package:lattice)
help("Sweave", package="utils")
rnwfile <- system.file("Sweave", "example-1.Rnw", package = "utils")
Sweave(rnwfile)
pdflatex("example-1.pdf")
(pdf)latex("example-1.pdf")
getwd()
(pdf)latex("example-1.tex")
pdflatex("example-1.tex")
(pdf)latex("example-1.tex")
(pdf)latex('example-1.tex')
(pdf)latex('example-1')
(pdf)latex(example-1.tex)
(pdf)latex(example-1.pdf)
source("Sweave-test-1.R")
source("http://www.openintro.org/stat/data/present.R")
10/11
0.078/0.138
(0.078/0.138)*100
0.18-0.044
0.191-0.036
0.175+0.018
0.191+0.18+0.028
0.18+0.028
0.191+0.18-0.014
getwd()
setwd("Analytics/Weeks/Week2/Data")
fluTrain <- read.csv("FluTrain.csv")
load(/Analytics/Weeks/Week2/Data/.RData])
load(Analytics/Weeks/Week2/Data/.RData)
load("Analytics/Weeks/Week2/Data/.RData")
load("~/Analytics/Weeks/Week2/Data/.RData")
